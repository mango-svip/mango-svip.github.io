{"meta":{"title":"这个肯定没人用过°","subtitle":"","description":"个人空间","author":"mango","url":"https://mango-svip.github.io","root":"/"},"pages":[],"posts":[{"title":"Gradle控制台乱码解决方法","slug":"Gradle控制台乱码解决","date":"2020-05-13T11:01:08.000Z","updated":"2020-05-13T03:05:07.233Z","comments":false,"path":"2020/05/13/Gradle控制台乱码解决/","link":"","permalink":"https://mango-svip.github.io/2020/05/13/Gradle%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/","excerpt":"Gradle编译时，Idea控制台输出中文乱码","text":"Gradle编译时，Idea控制台输出中文乱码 123456789101112项目编码已经是utf-8网上搜索得到的结果大部分已经过期最后按以下方案尝试修改：IDEA -&gt; Help -&gt; Edit Custom VM Options 在最后一行添加-Dfile.encoding&#x3D;utf-8保存重启IDEA后解决","categories":[],"tags":[]},{"title":"System.currentTimeMillis()优化方案","slug":"System.currentTimeMillis()优化方案","date":"2020-04-26T10:37:08.000Z","updated":"2020-05-13T03:05:07.233Z","comments":false,"path":"2020/04/26/System.currentTimeMillis()优化方案/","link":"","permalink":"https://mango-svip.github.io/2020/04/26/System.currentTimeMillis()%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/","excerpt":"System.currentTimeMillis()优化方案","text":"System.currentTimeMillis()优化方案 System.currentTimeMillis()在java中是最常用的获取系统时间的方法，它返回的是1970年1月1日0点到现在经过的毫秒数。 针对System.currentTimeMillis()性能不好的原因分析，有一篇很好的文章The slow currentTimeMillis()，它直接从系统级、源码、汇编语言各个层次全方位的分析。 从The slow currentTimeMillis()中我们了解到，执行速度缓慢currentTimeMillis()是由两个因素造成的： JVM使用gettimeofday() 而不是clock_gettime() gettimeofday() 如果使用HPET时间源，则速度非常慢 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import java.util.concurrent.Executors;import java.util.concurrent.ScheduledExecutorService;import java.util.concurrent.ThreadFactory;import java.util.concurrent.TimeUnit;import java.util.concurrent.atomic.AtomicLong;/** * 替换System.currentTimeMillis */public class SystemTimeMilli &#123; private final int period; private final AtomicLong now; private static class InstanceHolder &#123; private static final SystemTimeMilli INSTANCE = new SystemTimeMilli(1); &#125; private SystemTimeMilli(int period) &#123; this.period = period; this.now = new AtomicLong(System.currentTimeMillis()); scheduleClockUpdating(); &#125; private static SystemTimeMilli instance() &#123; return InstanceHolder.INSTANCE; &#125; private void scheduleClockUpdating() &#123; ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor(new ThreadFactory() &#123; @Override public Thread newThread(Runnable runnable) &#123; Thread thread = new Thread(runnable, \"System-Time-Milli\"); thread.setDaemon(true); return thread; &#125; &#125;); scheduler.scheduleAtFixedRate(() -&gt; now.set(System.currentTimeMillis()), period, period, TimeUnit.MILLISECONDS); &#125; private long currentTimeMillis() &#123; return now.get(); &#125; public static long now() &#123; return instance().currentTimeMillis(); &#125;&#125; 参考地址","categories":[],"tags":[]},{"title":"测试Github Actions","slug":"test","date":"2020-04-13T14:02:08.000Z","updated":"2020-05-13T03:05:07.233Z","comments":false,"path":"2020/04/13/test/","link":"","permalink":"https://mango-svip.github.io/2020/04/13/test/","excerpt":"测试Github Actions work","text":"测试Github Actions work","categories":[],"tags":[]},{"title":"Android","slug":"Android-adb","date":"2020-04-07T14:02:08.000Z","updated":"2020-05-13T03:05:07.233Z","comments":false,"path":"2020/04/07/Android-adb/","link":"","permalink":"https://mango-svip.github.io/2020/04/07/Android-adb/","excerpt":"Android Debug Bridge version 1.0.32","text":"Android Debug Bridge version 1.0.32 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147# -a - directs adb to listen on all interfaces for a connection -d - directs command to the only connected USB device returns an error if more than one USB device is present. -e - directs command to the only running emulator. returns an error if more than one emulator is running. -s &lt;specific device&gt; - directs command to the device or emulator with the given serial number or qualifier. Overrides ANDROID_SERIAL environment variable. -p &lt;product name or path&gt; - simple product name like &#39;sooner&#39;, or a relative&#x2F;absolute path to a product out directory like &#39;out&#x2F;target&#x2F;product&#x2F;sooner&#39;. If -p is not specified, the ANDROID_PRODUCT_OUT environment variable is used, which must be an absolute path. -H - Name of adb server host (default: localhost) -P - Port of adb server (default: 5037) devices [-l] - list all connected devices (&#39;-l&#39; will also list device qualifiers) connect &lt;host&gt;[:&lt;port&gt;] - connect to a device via TCP&#x2F;IP Port 5555 is used by default if no port number is specified. disconnect [&lt;host&gt;[:&lt;port&gt;]] - disconnect from a TCP&#x2F;IP device. Port 5555 is used by default if no port number is specified. Using this command with no additional arguments will disconnect from all connected TCP&#x2F;IP devices.device commands: adb push [-p] &lt;local&gt; &lt;remote&gt; - copy file&#x2F;dir to device (&#39;-p&#39; to display the transfer progress) adb pull [-p] [-a] &lt;remote&gt; [&lt;local&gt;] - copy file&#x2F;dir from device (&#39;-p&#39; to display the transfer progress) (&#39;-a&#39; means copy timestamp and mode) adb sync [ &lt;directory&gt; ] - copy host-&gt;device only if changed (-l means list but don&#39;t copy) (see &#39;adb help all&#39;) adb shell - run remote shell interactively adb shell &lt;command&gt; - run remote shell command adb emu &lt;command&gt; - run emulator console command adb logcat [ &lt;filter-spec&gt; ] - View device log adb forward --list - list all forward socket connections. the format is a list of lines with the following format: &lt;serial&gt; &quot; &quot; &lt;local&gt; &quot; &quot; &lt;remote&gt; &quot;\\n&quot; adb forward &lt;local&gt; &lt;remote&gt; - forward socket connections forward specs are one of: tcp:&lt;port&gt; localabstract:&lt;unix domain socket name&gt; localreserved:&lt;unix domain socket name&gt; localfilesystem:&lt;unix domain socket name&gt; dev:&lt;character device name&gt; jdwp:&lt;process pid&gt; (remote only) adb forward --no-rebind &lt;local&gt; &lt;remote&gt; - same as &#39;adb forward &lt;local&gt; &lt;remote&gt;&#39; but fails if &lt;local&gt; is already forwarded adb forward --remove &lt;local&gt; - remove a specific forward socket connection adb forward --remove-all - remove all forward socket connections adb reverse --list - list all reverse socket connections from device adb reverse &lt;remote&gt; &lt;local&gt; - reverse socket connections reverse specs are one of: tcp:&lt;port&gt; localabstract:&lt;unix domain socket name&gt; localreserved:&lt;unix domain socket name&gt; localfilesystem:&lt;unix domain socket name&gt; adb reverse --norebind &lt;remote&gt; &lt;local&gt; - same as &#39;adb reverse &lt;remote&gt; &lt;local&gt;&#39; but fails if &lt;remote&gt; is already reversed. adb reverse --remove &lt;remote&gt; - remove a specific reversed socket connection adb reverse --remove-all - remove all reversed socket connections from device adb jdwp - list PIDs of processes hosting a JDWP transport adb install [-lrtsd] &lt;file&gt; adb install-multiple [-lrtsdp] &lt;file...&gt; - push this package file to the device and install it (-l: forward lock application) (-r: replace existing application) (-t: allow test packages) (-s: install application on sdcard) (-d: allow version code downgrade) (-p: partial application install) adb uninstall [-k] &lt;package&gt; - remove this app package from the device (&#39;-k&#39; means keep the data and cache directories) adb bugreport - return all information from the device that should be included in a bug report. adb backup [-f &lt;file&gt;] [-apk|-noapk] [-obb|-noobb] [-shared|-noshared] [-all] [-system|-nosystem] [&lt;packages...&gt;] - write an archive of the device&#39;s data to &lt;file&gt;. If no -f option is supplied then the data is written to &quot;backup.ab&quot; in the current directory. (-apk|-noapk enable&#x2F;disable backup of the .apks themselves in the archive; the default is noapk.) (-obb|-noobb enable&#x2F;disable backup of any installed apk expansion (aka .obb) files associated with each application; the default is noobb.) (-shared|-noshared enable&#x2F;disable backup of the device&#39;s shared storage &#x2F; SD card contents; the default is noshared.) (-all means to back up all installed applications) (-system|-nosystem toggles whether -all automatically includes system applications; the default is to include system apps) (&lt;packages...&gt; is the list of applications to be backed up. If the -all or -shared flags are passed, then the package list is optional. Applications explicitly given on the command line will be included even if -nosystem would ordinarily cause them to be omitted.) adb restore &lt;file&gt; - restore device contents from the &lt;file&gt; backup archive adb disable-verity - disable dm-verity checking on USERDEBUG builds adb keygen &lt;file&gt; - generate adb public&#x2F;private key. The private key is stored in &lt;file&gt;, and the public key is stored in &lt;file&gt;.pub. Any existing files are overwritten. adb help - show this help message adb version - show version numscripting: adb wait-for-device - block until device is online adb start-server - ensure that there is a server running adb kill-server - kill the server if it is running adb get-state - prints: offline | bootloader | device adb get-serialno - prints: &lt;serial-number&gt; adb get-devpath - prints: &lt;device-path&gt; adb status-window - continuously print device status for a specified device adb remount - remounts the &#x2F;system and &#x2F;vendor (if present) partitions on the device read-write adb reboot [bootloader|recovery] - reboots the device, optionally into the bootloader or recovery program adb reboot-bootloader - reboots the device into the bootloader adb root - restarts the adbd daemon with root permissions adb usb - restarts the adbd daemon listening on USB adb tcpip &lt;port&gt; - restarts the adbd daemon listening on TCP on the specified portnetworking: adb ppp &lt;tty&gt; [parameters] - Run PPP over USB. Note: you should not automatically start a PPP connection. &lt;tty&gt; refers to the tty for PPP stream. Eg. dev:&#x2F;dev&#x2F;omap_csmi_tty1 [parameters] - Eg. defaultroute debug dump local notty usepeerdnsadb sync notes: adb sync [ &lt;directory&gt; ] &lt;localdir&gt; can be interpreted in several ways: - If &lt;directory&gt; is not specified, &#x2F;system, &#x2F;vendor (if present), and &#x2F;data partitions will be updated. - If it is &quot;system&quot;, &quot;vendor&quot; or &quot;data&quot;, only the corresponding partition is updated.environmental variables: ADB_TRACE - Print debug information. A comma separated list of the following values 1 or all, adb, sockets, packets, rwx, usb, sync, sysdeps, transport, jdwp ANDROID_SERIAL - The serial number to connect to. -s takes priority over this if given. ANDROID_LOG_TAGS - When used with the logcat option, only these debug tags are printed.","categories":[],"tags":[]},{"title":"IntelliJ IDEA Shortcuts","slug":"IntelliJIDEAShortcuts","date":"2020-04-07T14:02:08.000Z","updated":"2020-05-13T03:05:07.233Z","comments":false,"path":"2020/04/07/IntelliJIDEAShortcuts/","link":"","permalink":"https://mango-svip.github.io/2020/04/07/IntelliJIDEAShortcuts/","excerpt":"IntelliJ IDEA 快捷键整理","text":"IntelliJ IDEA 快捷键整理 0、代码补全更多提示12345678910111213141516win：Ctrl + j；mac：command＋j输入：iter Iterate (for each..in)itco for (Iterator&lt;String&gt; iterator &#x3D; locationUrl.iterator(); iterator.hasNext(); )itin Iterate (for..in)itli Iterate over a Listitit while (iterator.hasNext()) &#x2F;&#x2F; js中 for (var obj in _this)itar Iterate elements of arrayritar Iterate elements of array in reverse orderiten while (enumeration.hasMoreElements())itve for (int i &#x3D; 0; i &lt; vector.size(); i++)怎么生成小于某个数字的循环？ 比如生成10次循环： 1.正：10.fori 2.反：10.forr 就自动生成了 1、查看注释：Win: Ctrl+Q, Mac: Control+J123456789补齐方法调用: tab，如果方法有参数，光标会自动定位在小括号内，这个时候，使用commond+P或者Alt+P可以查看参数信息；如果没有参数，直接定位在()后；调用完毕，不需要再定位光标，直接 shift+command+Enter (win: Shift+Ctrl+Enter) 会自动补齐分号“;”，并自动定位到下一行。 1.2、新加文件自动加入版本控制设置intellij同eclipse一样，可以设置新建文件就直接add进入版本控制中；在settings –&gt; Version control –&gt; confirmation中选择add sliently即可 2、进入调用的接口实现12Ctrl+B &#x2F; Ctrl+Alt+B 在继承层次上跳转，分别对应父类或父方法定义和子类或子方法实现Ctrl + Alt + mouse left key 3、收起、展开 所有方法的快捷键是什么 ?123Ctrl+”+&#x2F;-”，当前方法展开、折叠Ctrl+Shift+”+&#x2F;-”，全部展开、折叠选择一部分代码,则收起或者展开选择部分的代码,不会影响其他地方的代码 4、调用方法显示方法形参列表（列出变量，能根据形参名和变量名排序）1ctrl+shift+space 5、idea 代码补全1alt + enter 6、idea 字符大小写切换1ctrl + shift + u 7、快速定位到语法错误的地方：12shift + f2shift + f6 重命名 8、引入try catch1Ctrl+Alt+T 9、IntelliJ IDEA的自动提示貌似是区分大小写的，首字母小写的话，怎么都提示不出来12editor &gt;general &gt;code completion &gt;case sensitive completion &gt;none这样就可以了 9.1、修改文件后，目录变色、tab标签用星号 ＊标记修改过的文件12setting&gt;version contro 勾上 show directorles with changed descendantssetting&gt;Editor&gt; general&gt;editor tabs 勾上 Mark modifyied tabs with asterisk 9.2、开启自动编译1File-&gt;setting-&gt;compiler 勾选Make project automatically 10、代码提示 keymap-completion12345678问题：Idea代码自动补全默认快捷键是 Ctrl + 空格。与输入法快捷键冲突修改：点击 文件菜单(File) –&gt; 点击 设置(Settings… Ctrl+Alt+S), –&gt; 打开设置对话框，在左侧的导航框中点击 KeyMap -&gt; 选择 Main menu –&gt; Code –&gt; Completion接着需要做两件事：1. 在Cycle Expand Word 上右击，移除原来的 Alt+&#x2F;(斜杠) 快捷键绑定。2. 在 Basic 上点击右键，移除原来的 Ctrl+空格 绑定，然后添加 Alt + 斜杠 快捷键。然后应用(Apply), OK. 11、快速生成代码，如：getter setter1alt + insert 12、优化导入的类和包123Ctrl+Alt+O更好的方法：在settings中搜索Auto Import，即setting—&gt;Editor—&gt;Auto Import（勾选下面两项自动导入class并优化导入的class），勾选：Add unambiguous imports on the fly 和 Optimize imports on the fly（连Ctrl+Shift+O都省了，是不是很爽） 13、方法调用链12alt + f7 查找那些类调用该资源（资源可能是字段、方法、类）Ctrl + alt + f7 快速显示查找内容 14、回车能自动跳到行尾1Ctrl+Shift+Enter(跳到行尾并且自动补全行末尾内容，如分好，if等后的大括号） 15、在editor间来回切换多个打开的tab页1Ctrl+ Tab 16、 复制当前行到粘贴板， Ctrl+C（不要选中任何内容）17、Ctrl+Shift+V 高级粘贴。。18、查找文件12345Ctrl+shift + n 通过文件名查找文件Ctrl+Alt+Shift+N 前往指定的变量 &#x2F; 方法Ctrl+n 通过class名查找Double Shift 双击Shift搜索文件或内容Ctrl + shift +a 查找动作或设置 19、Alt +Q 快捷显示当前行在哪个方法里(如果方法体太长，一屏显示不下这个很有用）20、查看/补全 调用方法的参数列表12Ctrl+P 查看方法参数（或叫方法签名) ，这个功能叫parameter infoCtrl+Shift+Space 光标在调用的方法名上按，显示方法参数信息；光标在调用的方法的括号中按，显示选择补全参数 21、Ctrl+Q 查看方法文档注释12doc文档快速显示，光标悬停到方法上时，显示文档注释设置：setting -&gt; Editor -&gt; General -&gt; 勾选Show quick documentation on mouse move 22、IDEA默认支持zen coding，写html再也不用敲尖括号了.，补全的快捷键是tab，不是Alt+/23、Ctrl + Mouse Wheel 编辑器字体随鼠标滚动变更字体1设置：setting -&gt; Editor -&gt; General -&gt; 勾选Change font size(Zoom) with Ctrl+Mouse Wheel 24、idea列编辑模式1alt + capslk(大小写切换) + 鼠标左键 Eclipse：alt+shit+a 25、定位到上次编辑的位置1Ctrl + Alt + left（right） 26、切换窗口：12Alt+Num 常用的有1-项目结构，3-搜索结果，4&#x2F;5-运行调试。Ctrl+Tab 切换标签页，Ctrl+E&#x2F;Ctrl+Shift+E打开最近打开过的或编辑过的文件 27、运行：Alt+Shift+F10运行程序，Shift+F9启动调试，Ctrl+F2停止28、新建：Alt+Insert可以新建类、方法等任何东西29、Ctrl + shift (+ 或 -) 折叠、收起代码30、Ctrl+F12 查看当前类的所有方法用31、要查找文本的出现位置就用Ctrl+F/Ctrl+Shift+F在当前窗口或全工程中查找，再配合F3/Shift+F3前后移动到下一匹配处32、格式化代码Ctrl+Alt+L33、Ctrl + R 替换34、Ctrl + alt + v 选中未声明变量的代码，为代码抽取变量35、IDEA 编辑窗口开多后自动关闭问题1Settings &gt;&gt; Editor &gt;&gt; General &gt;&gt; Editor Tabs中修改“Tab limit”值即可","categories":[],"tags":[]},{"title":"Go下载依赖比较慢的解决方法","slug":"goproxy","date":"2020-04-07T14:02:08.000Z","updated":"2020-05-13T03:05:07.233Z","comments":false,"path":"2020/04/07/goproxy/","link":"","permalink":"https://mango-svip.github.io/2020/04/07/goproxy/","excerpt":"设置Go proxy 来解决下载依赖慢的问题","text":"设置Go proxy 来解决下载依赖慢的问题 打开你的终端并执行 123go env -w GO111MODULE&#x3D;ongo env -w GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.cn,direct完成 macOS或Linux12$ export GO111MODULE&#x3D;on$ export GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.cn Windows123打开 PowerShell 并执行C:\\&gt; $env:GO111MODULE &#x3D; &quot;on&quot;C:\\&gt; $env:GOPROXY &#x3D; &quot;https:&#x2F;&#x2F;goproxy.cn&quot; 自托管Go的模块代理你的代码永远只属于你自己，因此我们向你提供目前世界上最炫酷的自托管 Go 模块代理搭建方案。通过使用 Goproxy 这个极简主义项目，你可以在现有的任意 Web 服务中轻松地加入 Go 模块代理支持，要知道 goproxy.cn 就是基于它搭建的。 创建一个名为 goproxy.go 的文件 123456789101112131415161718package mainimport ( \"net/http\" \"os\" \"github.com/goproxy/goproxy\")func main() &#123; g := goproxy.New() g.GoBinEnv = append( os.Environ(), \"GOPROXY=https://goproxy.cn,direct\", // 使用 goproxy.cn 作为上游代理 \"GOPRIVATE=git.example.com\", // 解决私有模块的拉取问题（比如可以配置成公司内部的代码源） ) http.ListenAndServe(\"localhost:8080\", g)&#125; 并运行它 然后通过把 GOPROXY 设置为 http://localhost:8080 来试用它。另外，我们也建议你把 GO111MODULE 设置为 on。就这么简单，一个功能完备的 Go 模块代理就搭建成功了。事实上，你可以将 Goproxy 结合着你钟爱的 Web 框架一起使用，比如 Gin 和 Echo，你所需要做的只是多添加一条路由而已。更高级的用法请查看文档。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-04-07T14:02:08.000Z","updated":"2020-05-13T03:05:07.233Z","comments":false,"path":"2020/04/07/hello-world/","link":"","permalink":"https://mango-svip.github.io/2020/04/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"Nginx 常用命令及其配置","slug":"nginx-command","date":"2020-04-07T14:02:08.000Z","updated":"2020-05-13T03:05:07.233Z","comments":false,"path":"2020/04/07/nginx-command/","link":"","permalink":"https://mango-svip.github.io/2020/04/07/nginx-command/","excerpt":"Nginx 常用的命令及其配置","text":"Nginx 常用的命令及其配置 12345678910nginx -s reload 重载配置文件nginx -s reopen 重新打开日志nginx -t 检查配置文件是否正确nginx -t -c 检查指定配置文件是否正确nginx -v 版本信息nginx -V 版本信息和编译选项nginx -s quit 等任务处理完退出nginxnginx -s stop 停止服务 1234567891011121314error_page 403 xxx.html;error_page 500 502 503 504 xx.html;隐藏服务器返回的真实状态码信息error_page 404 &#x3D;200 &#x2F;40x.html;error_page 404-&#x2F;40x.html;allow 192.168.1.1;deny all;内层块中的allow all会覆盖外层块中的deny all的设置 123456789location &#x3D;&#x2F;js 精准匹配location ~ 正则表达式完成，区分大小写location ~* 正则表达式，不区分大小写location ^~ 不使用正则表达式，完成以指定模式开头的location 匹配location @ 定义一个location块，只能被nginx内部配置指令访问普通location遵循最大前缀匹配，匹配度最高的location 将会被执行 1234error_log debug info notice warn error criterror_log &#x2F;dev&#x2F;null; 关闭错误日志 12345678910111213开启目录列表功能autoindex on;autoindex_exact_size; 文件大小autoindex_localtime; 文件时间server &#123; listen 80; server_name 192.168.78.2; root html; index index.php; &#125; 12345678910111213141516171819 if 指令判断符号 &#x3D;&#x3D; 判断是否相等 !&#x3D; 判断不相等 ~ 区分大小写正则匹配 ~* 不区分大小写正则匹配 !~ 区分大小写正则不匹配 ！~* 不区分大小写正则不匹配-f 判断文件存在!-f 判断文件不存在-d 判断目录存在!-d 判断目录不存在-x 判断可执行文件!~x 判断不可执行文件 更多请参考 nginx 官方网站一键生成 nginx配置","categories":[],"tags":[]}],"categories":[],"tags":[]}